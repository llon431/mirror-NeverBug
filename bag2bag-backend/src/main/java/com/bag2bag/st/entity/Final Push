package com.shanzhu.st.controller;

import com.shanzhu.st.entity.User;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import java.util.Map;

/**
 * User Controller (scaffold)
 * @author: Shahu
 * @date: 2025-08-15
 */
@CrossOrigin
@RestController
@RequestMapping("user")
public class UserController {

    // 未来要用到的 Service，先保留引用，方便后续实现
    @Resource
    private com.shanzhu.st.service.UserService userService;

    // 小工具：统一返回“未实现”
    private ResponseEntity<Map<String, Object>> notImplemented(String what) {
        return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED)
                .body(Map.of(
                        "message", what + " is not implemented yet",
                        "status", 501
                ));
    }

    /**
     * Register account (scaffold)
     */
    @PostMapping("sign-in")
    public ResponseEntity<?> signIn(@RequestBody User user) {
        // TODO: set defaults, call service to persist user
        return notImplemented("Registration");
    }

    /**
     * Login (scaffold)
     */
    @RequestMapping("login")
    public ResponseEntity<?> login(
            @RequestParam("accountNumber") @NotEmpty @NotNull String accountNumber,
            @RequestParam("userPassword")  @NotEmpty @NotNull String userPassword
    ) {
        // TODO: verify credentials, issue session/cookie/token
        return notImplemented("Login");
    }

    /**
     * Logout (scaffold)
     */
    @RequestMapping("logout")
    public ResponseEntity<?> logout(
            @CookieValue("shUserId")
            @NotNull(message = "Session invalid. Please log in again")
            @NotEmpty(message = "Session invalid. Please log in again")
            String shUserId
    ) {
        // TODO: clear session/cookie
        return notImplemented("Logout");
    }

    /**
     * Get user info (scaffold)
     */
    @GetMapping("info")
    public ResponseEntity<?> getOneUser(
            @CookieValue("shUserId")
            @NotNull(message = "Session invalid. Please log in again")
            @NotEmpty(message = "Session invalid. Please log in again")
            String id
    ) {
        // TODO: fetch user by id
        return notImplemented("Fetch user info");
    }

    /**
     * Update public info (scaffold)
     */
    @PostMapping("/info")
    public ResponseEntity<?> updateUserPublicInfo(
            @CookieValue("shUserId")
            @NotNull(message = "Session invalid. Please log in again")
            @NotEmpty(message = "Session invalid. Please log in again")
            String id,
            @RequestBody User user
    ) {
        // TODO: update user info
        return notImplemented("Update user info");
    }

    /**
     * Change password (scaffold)
     */
    @GetMapping("/password")
    public ResponseEntity<?> updateUserPassword(
            @CookieValue("shUserId")
            @NotNull(message = "Session invalid. Please log in again")
            @NotEmpty(message = "Session invalid. Please log in again")
            String id,
            @RequestParam("oldPassword") @NotEmpty @NotNull String oldPassword,
            @RequestParam("newPassword") @NotEmpty @NotNull String newPassword
    ) {
        // TODO: verify old password and set new password
        return notImplemented("Password update");
    }
}
